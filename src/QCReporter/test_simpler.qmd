---
title: "Genomics QC Report"
author: "GDC Data Team"
date: today
format: pdf
editor: visual
execute:
  echo: false
  warning: false
  error: false
  message: false
  toc: true
project:
  output-dir: /home/gdc/shared/GDC_pipeline/results/
---

The following is an automated report describing the quality control (QC) processing of your dataset. detailed description of the QC steps taken.

```{r loadPackages}
#| message: false
#| echo: false
library(dplyr)
library(DiagrammeR)
library(ggplot2)
library(gt)
library(forcats)
```

# General Summary

The QC process outline below first process the data in aggregate removing SNPs and subjects with large amounts of missingness. In addition, SNPs are filtered to remove those with low minor allele frequency (MAF), frequencies are two out of equlibrium based on [Hardy-Weinberg equilibrium (HWE)](https://www.nature.com/scitable/definition/hardy-weinberg-equilibrium-122/). Then, for multiethnic samples, subject ancestries are predicted using [principal components analysis (PCA)](https://www.nature.com/articles/ng1847) and [k-means clustering](https://en.wikipedia.org/wiki/K-means_clustering). Finally, the original data is filtered again at the level of each predicted ancestry before it is later rejoined into the full dataset. Table @ref(tab:summary) summarizes the number of SNPs and subjects at each step of the QC process.

```{r importdata, echo=FALSE}
#path_to_data="/home/gdc/shared/GDC_pipeline/data/"
path_to_data="C:/Users/baron063/Desktop/GDC_ppln_development/sample_data/" # Temp for modifications
path_to_data="/home/gdc/shared/GDC_pipeline/data/"
path_to_data="/home/gdc/shared/GDC_pipeline/data/"
# Data
indmiss<-read.table(file=paste0(path_to_data,"plink.imiss"), header=TRUE)
snpmiss<-read.table(file=paste0(path_to_data, "plink.lmiss"), header=TRUE)
gender <- read.table(paste0(path_to_data, "gender_check.sexcheck"), header=T,as.is=T)
maf_freq <- read.table(paste0(path_to_data, "MAF_check.frq"), header =TRUE, as.is=T)
hwe<-read.table (file=paste0(path_to_data, "plink.hwe"), header=TRUE)
hwe_zoom<-read.table (file=paste0(path_to_data, "plinkzoomhwe.hwe"), header=FALSE)
het <- read.table(paste0(path_to_data,"R_check.het"), head=TRUE)
relatedness = read.table(paste0(path_to_data,"pihat_min0.2.genome"), header=T)
relatedness_zoom = read.table(paste0(path_to_data, "zoom_pihat.genome"), header=T)

#Reading in the tables for later use
QC2_geno_table <- read.table(file = paste0(path_to_data, "QC2_geno.txt"),  quote="\"", comment.char="")
QC3_mind_table <- read.table(paste0(path_to_data,"QC3_mind.txt"),  quote="\"", comment.char="")
QC4_geno_table <- read.table(paste0(path_to_data, "QC4_geno.txt"),  quote="\"", comment.char="")
QC5_mind_table <- read.table(paste0(path_to_data, "QC5_mind.txt"),  quote="\"", comment.char="")
QC6_sex_check_table <- read.table(paste0(path_to_data, "QC6_sex_check.txt"), quote="\"", comment.char="")
QC7_maf_table <- read.table(paste0(path_to_data,"QC_7_maf.txt"), quote="\"", comment.char="")
QC8_hwe_table <- read.table(paste0(path_to_data, "QC_8_hwe.txt"), quote="\"", comment.char="")
QC8b_hwe_table <- read.table(paste0(path_to_data,"QC_8b_hwe.txt"), quote="\"", comment.char="")
QC9_filter_founders_table <- read.table(paste0(path_to_data, "QC_9_filter-founders.txt"), quote="\"", comment.char="")

QC_indep_pairwise_table <- read.csv(paste0(path_to_data,"QC_indep_pairwise.txt"), sep = "")
QC_indep_pairwise_bychr <- read.csv(paste0(path_to_data, "each_SNP_QC_indep_pairwise.txt"), sep = "")

```

```{r dataCleaning}
# Data cleaning for geno steps
geno_tab_1 = t(QC2_geno_table)
colnames(geno_tab_1)=geno_tab_1[1, ]
QC_step=c("2", "2")
geno_tab_1b=cbind(geno_tab_1, QC_step)
geno_tab_1_clean=geno_tab_1b[2,]
geno_tab_2 = t(QC4_geno_table)
colnames(geno_tab_2)=geno_tab_2[1, ]
QC_step=c("4", "4")
geno_tab_2b=cbind(geno_tab_2, QC_step)
geno_tab_2_clean=geno_tab_2b[2,]

# Data cleaning for mind steps
mind_tab_1 = t(QC3_mind_table)
colnames(mind_tab_1)=mind_tab_1[1, ]
QC_step=c("3", "3")
mind_tab_1b=cbind(mind_tab_1, QC_step)
mind_tab_1_clean=mind_tab_1b[2,]
mind_tab_2 = t(QC5_mind_table)
colnames(mind_tab_2)=mind_tab_2[1, ]
QC_step=c("QC_step", "5")
mind_tab_2b=cbind(mind_tab_2, QC_step)
mind_tab_2_clean=mind_tab_2b[2,]

#Sex check
sex_check_tab = t(QC6_sex_check_table)
colnames(sex_check_tab)=sex_check_tab[1, ]
QC_step=c("QC_step", "6")
sex_check_tab_2b=cbind(sex_check_tab, QC_step)
sex_check_tab_2_clean=sex_check_tab_2b[2,]

#MAF check 
QC7_maf_tab=t(QC7_maf_table)
colnames(QC7_maf_tab)=QC7_maf_tab[1, ]
QC_step=c("QC_step", "7")
maf_tab_2b=cbind(QC7_maf_tab, QC_step)

#hwe check table
hwe_tab_1 = t(QC8_hwe_table)
colnames(hwe_tab_1)=hwe_tab_1[1, ]
QC_step=c("QC_step", "8")
hwe_tab_1b=cbind(hwe_tab_1, QC_step)
hwe_tab_1_clean=hwe_tab_1b[2,]
hwe_tab_2 = t(QC8b_hwe_table)
colnames(hwe_tab_2)=hwe_tab_2[1, ]
QC_step=c("QC_step", "8.1")
hwe_tab_2b=cbind(hwe_tab_2, QC_step)
hwe_tab_2_clean=hwe_tab_2b[2,]

f_f_tab=t(QC9_filter_founders_table)
colnames(f_f_tab)=f_f_tab[1, ]
QC_step=c("QC_step", "9")
f_f_tab_2b=cbind(f_f_tab, QC_step)
f_f_tab_2_clean=f_f_tab_2b[2,]

```

```{r Geno_tab}
geno_table_summary = rbind(geno_tab_1_clean, geno_tab_2_clean)
geno_tibble=as_tibble(geno_table_summary)
```

```{r Mind_tab}
mind_table_summary = rbind(mind_tab_1_clean, mind_tab_2_clean)
mind_tibble=as_tibble(mind_table_summary)
```

```{r maf_tab}
maf_tab_2_clean=maf_tab_2b[2,]
# maf_df=as.data.frame(maf_tab_2b)
# gt(maf_df)
```

```{r hwe_tab}
hwe_table_summary = rbind(hwe_tab_1_clean, hwe_tab_2_clean)
hwe_tibble=as_tibble(hwe_table_summary)
```

```{r sexcheck_table}
sex_check_df =as.data.frame(sex_check_tab_2b)
# sex_check_df[2,5]=as.numeric(trimws(sex_check_df[2,5]))-as.numeric(trimws(sex_check_df[2,8]))
gt(sex_check_df[2,]) %>%
  tab_header(title="Gender Check Table") %>%
  tab_spanner(
    label = "Inputs",
    columns = c(InSubjects, InMale, InFemale)
  ) %>%
  tab_spanner(
    label = "Outputs",
    columns = c(OutSubjects, NumX, NumY, NumProblems)
  ) %>%
  cols_hide(columns = c(InSNPs, OutSNPs)) %>%
  cols_move_to_start(columns = QC_step)
```

```{r full_table}
#Putting it all together if possible
full_table=rbind(geno_tab_1_clean, mind_tab_1_clean, geno_tab_2_clean, mind_tab_2_clean, maf_tab_2_clean, hwe_table_summary)
colnames(full_table)=c("InSubjects", "InMale", "InFemale", "InSNPs",
                       "OutSubjects", "NumRemoved", "OutSNPs", "Qc_step")
full_table=as.data.frame(full_table) 
gt(full_table) %>%
  tab_header(title="QC Steps Summary Table") %>%
  tab_spanner(
    label = "Inputs",
    columns = c(InSubjects, InMale, InFemale, InSNPs)
  ) %>%
  tab_spanner(
    label = "Outputs",
    columns = c(OutSubjects, OutSNPs)
  ) %>%
  cols_move_to_start(columns = Qc_step) %>%
  rows_add(
    Qc_step="6",
    InSubjects=sex_check_df[2,1],
    InMale=sex_check_df[2,2],
    InFemale=sex_check_df[2,3],
    InSNPs=sex_check_df[2,4],
    OutSubjects=sex_check_df[2,5],
    OutSNPs=sex_check_df[2,9],
    NumRemoved=sex_check_df[2,8],
    .after = 4
  ) %>%
  tab_footnote(
    footnote = "Subjects flagged as potential issues",
    locations = cells_body(columns=NumRemoved, rows = 5)
  ) %>%
  cols_add(
    InputAltered=c("SNPs", "Subjects", "SNPs", "Subjects", "Subjects", "SNPs", "SNPs", "SNPs"),
    .after = InSNPs
  ) %>%
  cols_label(
    Qc_step="QC Step",
    InSubjects = "Subjects",
    InMale = "Male",
    InFemale= "Female",
    InSNPs="SNPs",
    InputAltered= "Input Altered",
    OutSubjects = "Subjects", 
    OutSNPs = "SNPs", 
    NumRemoved = "Alteration"
  ) %>%
  cols_move(
    columns = NumRemoved,
    after = InputAltered
  )



```

The table below is odd and might not be essential to include as a separate table

```{r indep_pairwise_table}
QC_indep_pairwise_table=as.data.frame(QC_indep_pairwise_table)
gt(QC_indep_pairwise_table) %>%
  tab_header(title="QC Independent Pairwise Summary Table")
```

```{r indep_bychr_pairwise}
QC_indep_pairwise_bychr=as.data.frame(QC_indep_pairwise_bychr)
summary_row=QC_indep_pairwise_bychr %>% 
  mutate(group = 1) %>%
  group_by(group) %>%
  summarise(PrunedSNPs=sum(PrunedSNPS), RemainingSNPs = sum(RemainingSNPS))
gt(QC_indep_pairwise_bychr) %>%
  tab_header(title="SNPs Pruned by Chromosome") %>%
  rows_add(
    PrunedSNPS=summary_row$PrunedSNPs,
    Chr=00,
    RemainingSNPS=summary_row$RemainingSNPs,
    .after = nrow(QC_indep_pairwise_bychr)
  )%>%
  tab_footnote(
    footnote = "Temporary total row",
    locations = cells_body(columns=PrunedSNPS, rows = 23)
  )
   
```

# Summary Visual

### Subjects

```{r subjectsummplot, echo=FALSE, eval=FALSE}
example_node_list=node_list_1
example_edge_list=edge_list_1

example_node_list$label=c(full_table$InSubjects, 2000, 1900, 1800)

example_edge_list$from=c(1:19)
example_edge_list$to=c(2:19, 19)

id=1:8
label=c(full_table$InSubjects[1], full_table$OutSubjects)
altered=c("Input","SNPs", "Subjects", "SNPs", "Subjects", "SNPs", "SNPs", "SNPs")
deretla=c("SNPs", "Subjects", "SNPs", "Subjects", "SNPs", "SNPs", "SNPs")
example_node_list=cbind(id, label)
ex_nod_lst = data_frame(id, label, altered)

from=1:15
to=c(2:15,15)
ex_edge_lst=data_frame(from, to)

example_edge_list$from=c(1:19)
example_edge_list$to=c(2:19, 19)

i_graph_1 <- create_graph()

i_graph_2 <- i_graph_1 %>%
  add_nodes_from_table(
    table=ex_nod_lst,
    label_col=label
  )

i_graph_3 <- 
  i_graph_2 %>% 
  add_edges_from_table(
    table = ex_edge_lst,
    from_col = from,
    to_col = to,
    from_to_map = id_external
  ) %>% 
  drop_node_attrs(node_attr = id_external)
 # render_graph(i_graph_3, layout = "kk") # Remove the pipe operator and should work as before

k_graph <-
  i_graph_3 %>%
  select_nodes(conditions = (altered == "Subjects")) %>%
  set_node_attrs_ws(node_attr = fillcolor, value = "forestgreen") %>%
  invert_selection() %>%
  set_node_attrs_ws(node_attr = fillcolor, value = "red") %>%
  select_edges(conditions = (deretla == "Subjects")) %>%
  set_edge_attrs_ws(edge_attr = color, value = "forestgreen") %>%
  invert_selection() %>%
  set_edge_attrs_ws(edge_attr = color, value = "red") # %>%
  # clear_selection() %>%
  # set_node_attr_to_display(attr = id)
render_graph(k_graph)
```

### SNPs

```{r SNPssummplot, echo=FALSE, eval=FALSE}
id=1:8
label=c(full_table$InSNPs[1], full_table$OutSNPs)
altered=c("Input","SNPs", "Subjects", "SNPs", "Subjects", "SNPs", "SNPs", "SNPs")
deretla=c("SNPs", "Subjects", "SNPs", "Subjects", "SNPs", "SNPs", "SNPs")
example_node_list=cbind(id, label)
ex_nod_lst = data_frame(id, label, altered)

from=1:15
to=c(2:15,15)
ex_edge_lst=data_frame(from, to)

example_edge_list$from=c(1:19)
example_edge_list$to=c(2:19, 19)

i_graph_1 <- create_graph()

i_graph_2 <- i_graph_1 %>%
  add_nodes_from_table(
    table=ex_nod_lst,
    label_col=label
  )

i_graph_3 <- 
  i_graph_2 %>% 
  add_edges_from_table(
    table = ex_edge_lst,
    from_col = from,
    to_col = to,
    from_to_map = id_external
  ) %>% 
  drop_node_attrs(node_attr = id_external)
 # render_graph(i_graph_3, layout = "kk") # Remove the pipe operator and should work as before

k_graph_2 <-
  i_graph_3 %>%
  select_nodes(conditions = (altered == "SNPs")) %>%
  set_node_attrs_ws(node_attr = fillcolor, value = "forestgreen") %>%
  invert_selection() %>%
  set_node_attrs_ws(node_attr = fillcolor, value = "red") %>%
  select_edges(conditions = (deretla == "SNPs")) %>%
  set_edge_attrs_ws(edge_attr = color, value = "forestgreen") %>%
  invert_selection() %>%
  set_edge_attrs_ws(edge_attr = color, value = "red") # %>%
  # clear_selection() %>%
  # set_node_attr_to_display(attr = id)
render_graph(k_graph_2)
```

# Detailed QC summary

## Per Subject summary

Subjects were filtered based on missingness and heterozygosity. An LD pruning step was also performed.

```{r ind_missingness_hist}
num_indmiss=nrow(indmiss)
data.frame("Subject" = 1:nrow(indmiss),
           "Missingness" = indmiss$F_MISS) %>%
  ggplot(aes(x = Missingness, color ="blue")) +
  geom_histogram(bins = round(num_indmiss/25, digits = 0), show.legend = FALSE) + 
  geom_vline(xintercept = 0.01, color = "red") + 
  xlab("Percent Missing SNPs") +
  ggtitle("SNPS missingness per subject") +
  theme_classic()

#data.frame("Subject" = 1:nrow(indmiss),
#           "Missingness" = indmiss$F_MISS) %>%
#  ggplot(aes(x = Missingness)) +
#  geom_density() + 
#  geom_vline(xintercept = 0.01, color = "red") + 
#  xlab("Missingness per subject") +
#  ggtitle("SNPS missingness per subject") +
#  theme_classic()
```

The [heterozygosity F statistic (FIS)](https://en.wikipedia.org/wiki/F-statistics) the departure from HWE in a population. The heterozygosity F statistic is given by the following equation: $$
F = \frac{1}{N}\sum_{i=1}^N \frac{O_i - E_i}{E_i}
$$

```{r hetFilter}
#| label: fig-hetFilter
#| fig-cap: "Heterozygosity distributions with cutoff shown as red vertical line."

het$HET_RATE = (het$"N.NM." - het$"O.HOM.")/het$"N.NM."
lower_cutoff_het=mean(het$HET_RATE)-3*sd(het$HET_RATE)
upper_cutoff_het=mean(het$HET_RATE)+3*sd(het$HET_RATE)

data.frame("Subject" = 1:nrow(het),
           "Heterozygosity" = het$HET_RATE) %>%
  ggplot(aes(x = Heterozygosity, color ="blue")) +
  geom_histogram(bins = 100, show.legend = FALSE) + 
  geom_vline(xintercept = c(lower_cutoff_het, upper_cutoff_het), color = "red") + 
  xlab("Heterozygosity F statistic") +
  ggtitle("Heterozygous F Statistic Distribution") +
  theme_classic()
```

Extra plot

```{r hetSimpleVisual, warning=FALSE}

het_fail = subset(het, (het$HET_RATE < mean(het$HET_RATE)-3*sd(het$HET_RATE)) | (het$HET_RATE > mean(het$HET_RATE)+3*sd(het$HET_RATE)));

placeholder = c()
for(i in 1:nrow(het)) {
  if(het[i, 2] %in% het_fail[[2]]) {
    placeholder[i]="PROBLEM"
  }
  if(!het[i,2] %in% het_fail[[2]]) {
    placeholder[i] = "OK"
  }
}

temp_table = table(placeholder)
het_refined=cbind(het, placeholder)

het_refined$placeholder=as.factor(het_refined$placeholder)
het_refined %>% 
  mutate(
    outcome= fct_relevel(
      placeholder, 
      c(
        "PROBLEM", "OK"
      )
    )
  ) %>%
  ggplot(aes(x=outcome, fill = outcome)) +
  geom_histogram(stat = "count", show.legend = FALSE)+ 
  xlab("Status") +
  ggtitle("Heterozygosity Analysis") + 
  theme_classic()

```

## Per SNP summary

SNPS were filtered based on missingness and MAF as well as HWE @fig-firstFilter.

```{r firstFilter}
#| label: fig-firstFilter
#| fig-cap: "Missingness, MAF, and HWE filters involved in initial SNP filtering. Cutoffs are shown as red vertical lines"
num_snpmiss=nrow(snpmiss)
# data.frame("SNP" = 1:nrow(snpmiss),
#            "Missingness" = snpmiss$F_MISS) %>%
#   ggplot(aes(x = Missingness)) +
#   geom_histogram(bins = round(num_snpmiss/3000, digits = 0)) +
#   geom_vline(xintercept = 0.01, color = "red") +
#   xlab("Missingness") +
#   ggtitle("Percent missing calls per SNP") +
#   theme_classic()
# 
# data.frame("SNP" = 1:nrow(snpmiss),
#            "Missingness" = snpmiss$F_MISS) %>%
#   ggplot(aes(x = Missingness)) +
#   geom_boxplot() +
#   geom_vline(xintercept = 0.01, color = "red") +
#   xlab("Missingness") +
#   ggtitle("Percent missing calls per SNP") +
#   theme_classic()

data.frame("SNP" = 1:nrow(snpmiss),
           "Missingness" = snpmiss$F_MISS) %>%
  ggplot(aes(x = Missingness)) +
  geom_density(aes(fill="blue", color ="blue"), show.legend = FALSE) +
  geom_vline(xintercept = 0.01, color = "red") +
  xlab("Missingness per SNP") +
  ggtitle("Percent calls missing per SNP") +
  theme_classic()
```

```{r Maf_freq_hist}
data.frame("SNP" = 1:nrow(maf_freq),
           "MAF" = maf_freq[,5]) %>%
  ggplot(aes(x = MAF, color ="blue")) +
  geom_histogram(bins = 100, show.legend = FALSE) +
  geom_vline(xintercept = 0.1, color = "red") +
  xlab("Minor allele frequency") +
  ggtitle("MAF distribution") + 
  theme_classic()
```

```{r HWE_hist}
data.frame("SNP" = 1:nrow(hwe),
           "HWE" = hwe[,9]) %>%
  ggplot(aes(x = HWE, color="blue")) +
  geom_histogram(bins = 100, show.legend = F) +
  geom_vline(xintercept = 0.10, color = "red") +
  xlab("log(HWE p-value)") +
  ggtitle("Hardy-Weinberg Equilibrium p-value distribution") +
  theme_classic()


```

## Gender checks

```{r gender_plots}
ggplot(data=gender, aes(x=F, color="blue"))+
  geom_histogram(bins = 100, show.legend = F)+
  geom_vline(xintercept = 0.20, color = "red") +
  geom_vline(xintercept = 0.80, color = "red") +
  xlab("F Value") +
  ggtitle("Gender Analysis") +
  theme_classic()
```

```{r gender_plot2, warning=FALSE}
gender$STATUS=as.factor(gender$STATUS)
gender %>% 
  mutate(
    outcome= fct_relevel(
      STATUS, 
      c(
        "PROBLEM", "OK"
      )
    )
  ) %>%
  ggplot(aes(x=outcome, fill =outcome))+
  geom_bar(stat = "count", show.legend = F) +
  xlab("Status") +
  ggtitle("Homozygosity Gender Analysis") +
  theme_classic()
```

## Extra plots that need to be altered and rearranged

```{r HWE_strong}
data.frame("SNP" = 1:nrow(hwe_zoom),
           "HWE" = hwe_zoom[,9]) %>%
  ggplot(aes(x = HWE, color="blue")) +
  geom_histogram(bins = round(nrow(hwe_zoom)/600, digits = 0), show.legend = F)  +
  xlab("P-value") +
  ggtitle("Histogram HWE: strongly deviating SNPs only") +
  theme_classic()
```

```{r subj_relatedness_hist}
ggplot(data= relatedness, aes(x=PI_HAT, color="blue"))+
  geom_dotplot(stackratio = 0.1, binwidth = 0.02, show.legend = F)+
  xlab("Proportion IBD") +
  ggtitle("Histogram Relatedness") +
  theme_classic()

```

## Ancestry predictions

Ancestries are predicted after the initial round of QC steps. The principal components upon which the population is stratifed, are based off of the [genetic relatedness matrix (GRM)](https://zjuwhw.github.io/2021/08/20/GRM.html). The subjects are then projected onto the PC space and assigned ethnicities using k-means clustering based on either a standard genomic dataset (such as though genomes) are by the reported ancestries of the subject in the study. Figure @fig-ancestryPredictions) the projection of each subject onto the first few PCs. They are colored by their reported ancestries.

The densities of ancestries based on the reference set are represent by the 10% contour lines of the 2d density plots with the observed populations presented as points over top of the densities shown in @fig-ancestryPredictions.

```{r ancestryPredictions}
#| label: fig-ancestryPredictions
#| fig-cap: "Ancestry predictions plotted over first decile contour for each ancestry."
data.frame(Ancestry = rep(c("Ancestry 1", "Ancestry 2"), each = 50),
           PC1 = c(rnorm(50, 0, 1), rnorm(50, 9, 1)),
           PC2 = c(rnorm(50, 0, 1), rnorm(50, 9, 1))) %>%
  ggplot(aes(x = PC1, y = PC2, color = Ancestry)) +
  geom_density_2d(breaks = c(0.05)) + 
  geom_point() +
  ggtitle("Ancestry Predictions")+
  theme_classic()
```

## Per Ancestry summary

We also summarize the QC metrics per ancestry. @fig-ancestrySummary) shows the distribution of MAF per ancestry.

```{r ancestrySummary}
#| label: fig-ancestrySummary
#| fig-cap: "MAF faceted by ancestry with the cutoff vizualized as a red vertical line."
data.frame("Ancestry" = rep(c("Anc1", "Anc2", "Anc3"), each = 50),
           "MAF" = c(rbeta(50, 3, 2), rbeta(50, 3, 3), rbeta(50, 4, 1))) %>%
  ggplot(aes(x = MAF, fill=Ancestry, color="blue")) +
  geom_histogram(bins=20, show.legend = FALSE) + 
  geom_vline(xintercept = 0.05, color = "red") + 
  xlab("Minor allele frequency") +
  ggtitle("Minor allele frequency by Ancestry") + 
  facet_wrap(~Ancestry, ncol = 2) + 
  theme_classic()

```
